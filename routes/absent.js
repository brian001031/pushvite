require("dotenv").config();
const express = require("express");
const router = express.Router();
const multer = require("multer");
const crypto = require("crypto");
const jwt = require("jsonwebtoken");
const db = require(__dirname + "/../modules/db_connect.js");
const db2 = require(__dirname + "/../modules/mysql_connect.js");
const axios = require("axios");
const _ = require("lodash");
const bcrypt = require("bcryptjs");
const mysql = require("mysql2");
const { Pool } = require("pg");
const fs = require("fs");
const moment = require("moment");
const util = require('util');
const schedule = require("node-schedule");
const xlsx = require("xlsx");
const path = require("path"); 


const dbcon = mysql.createPool({
  host: "192.168.3.100",
  user: "root",
  password: "Admin0331",
  database: "hr",
  waitForConnections: true,
  connectionLimit: 5,
  queueLimit: 0,
  multipleStatements: true,
});

const leaveApply_Db = new Pool({
    connectionString: process.env.DATABASE_URL, 
    ssl: { rejectUnauthorized: false }
});

dbcon.once("error", (err) => {
  console.log("Error in connecting to database: ", err);
});

if (!dbcon.__errorListenerAdded) {
  dbcon.on("error", (err) => {
    console.error("Database connection error:", err);
  });
  dbcon.__errorListenerAdded = true; // Ê†áËÆ∞ÁõëÂê¨Âô®Â∑≤Ê∑ªÂä†

  //Á¢∫Ë™çÈÄ£Á∑öÁãÄÊ≥ÅÊòØÂê¶Ê≠£Â∏∏
  dbcon.getConnection((err, connection) => {
    if (err) {
      console.error("Error getting connection:", err);
      return err;
    }
  });
  dbcon.promise();
}

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, "Z:/Ë≥áË®äËôï- Â≠òË´ãÂÅáË≥áË®ä/leaveFileWay"); 
    },
    filename: (req, file, cb) => {
        // Ëá™Ë®ÇÊ™îÊ°àÂêçÁ®±ÔºöID_Êó•Êúü_Â∫èËôü_ÂéüÊ™îÂêç
        const memberID = req.body.memberID || 'unknown';
        const currentDate = moment().format('YYYYMMDD-HHmmss');
        const fileExtension = file.originalname.split('.').pop();
        const timestamp = Date.now();
        const randomSuffix = Math.random().toString(36).substring(2, 8);
        const fileName = `${memberID}_${currentDate}_${timestamp}_${randomSuffix}.${fileExtension}`;

        cb(null, fileName);
    }
});

const upload = multer({ 
    storage: storage,
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB ÈôêÂà∂
        files: 10 // ÊúÄÂ§ö 10 ÂÄãÊ™îÊ°à
    }
});


// ÂÆöÊôÇ‰ªªÂãôÔºöÊØèÂ§©ÂêåÊ≠•Ë´ãÂÅáË≥áÊñô
const syncLeaveData = async (req, res) => {

    const now = moment().format("YYYY-MM-DD HH:mm:ss");
    const minusSevenDays = moment().subtract(7, 'days').format("YYYY-MM-DD HH:mm:ss");
    const plusSevenDays = moment().add(7, 'days').format("YYYY-MM-DD HH:mm:ss");

    const sql_OutSideDb_LeaveApply = `SELECT * FROM absentsystem_leavesortoutall `;
    const sql_localDb_LeaveApply = `SELECT * FROM absentsystem_leavesortoutall where created_at between '${minusSevenDays}' and '${plusSevenDays}'`;
    
    
    let syncedType = false;

    try {
        // Â§ñÈÉ®Ë≥áÊñôÂåØÂÖ•
        const result = await leaveApply_Db.query(sql_OutSideDb_LeaveApply);
        console.log("OutSide Date " ,result.rows);
        console.log("minusSevenDays:", minusSevenDays + "|" + "plusSevenDays:" + plusSevenDays);
        
        let datas = result.rows;

        // Âú∞Á´ØË≥áË®äÂåØÂÖ•
        const result_local = await dbcon.query(sql_localDb_LeaveApply);
        console.log("Local Date ", result_local[0]);
        

        for (const row of result_local[0]) {
            const matchingData = datas.find(data => data.id === row.id);
            if (matchingData) {
                // Â¶ÇÊûúÊâæÂà∞Â∞çÊáâÁöÑË≥áÊñôÔºåÂâáÊõ¥Êñ∞
                Object.assign(matchingData, row);
            }
        }

        res.status(200).json({
            message: "NEON Ë≥áÊñôÂ∫´ÈÄ£Êé•ÊàêÂäü",
            data: datas,
            timestamp: new Date().toISOString()
        });
        
    } catch (err) {
        console.error("NEON Ë≥áÊñôÂ∫´ÈÄ£Êé•ÈåØË™§:", err);
        res.status(500).json({
            error: "NEON Ë≥áÊñôÂ∫´ÈÄ£Êé•Â§±Êïó",
            message: err.message
        });
    }
}

// Áî®ÊñºÊ∏õËºïË≥áÊñôÂ∫´Â£ìÂäõ
const deleteData = async () => {
    try {
        const sql = `
            DELETE FROM leave_applications 
            WHERE randomuniqueid IS NOT NULL 
              AND is_synced = $1 
              AND synced_at IS NOT NULL
        `;
        const result = await leaveApply_Db.query(sql, [true]);

        console.log(`üóëÔ∏è Â∑≤Âà™Èô§ ${result.rowCount || 0} Á≠ÜÂ∑≤ÂêåÊ≠•ÁöÑË≥áÊñô`);
        return {
            success: true,
            deletedCount: result.rowCount || 0
        };
    } catch (err) {
        console.error("‚ùå Âà™Èô§Ë≥áÊñôÈåØË™§:", err);
        throw err;
    }
};


// HTTP Ë∑ØÁî±ÁâàÊú¨ÁöÑÂà™Èô§ÂäüËÉΩ
router.get("/deleteData", async (req, res) => {
    try {
        const result = await deleteData();
        res.status(200).json({ 
            message: "Âà™Èô§ÊàêÂäü", 
            deletedCount: result.deletedCount
        });
    } catch (err) {
        console.error("‚ùå HTTP Âà™Èô§Ë≥áÊñôÈåØË™§:", err);
        res.status(500).json({ 
            error: "Âà™Èô§Ë≥áÊñôÂ§±Êïó", 
            message: err.message 
        });
    }
});

// Â∞çÊ®ô Á∑ö‰∏äË≥áÊñôÂ∫´ Ëàá Á∑ö‰∏ãË≥áÊñôÂ∫´ÁöÑË´ãÂÅáÁî≥Ë´ãË≥áÊñô
router.get("/compare_leaveApplyDb", async (req, res) => {
    // Ê™¢Ê∏¨ÂÆ¢Êà∂Á´ØÈÄ£Êé•ÁãÄÊÖã
    let isClientConnected = true;
    let requestTimeout;

    // Ë®≠ÁΩÆË´ãÊ±ÇË∂ÖÊôÇ (60ÁßíÔºåÂõ†ÁÇ∫ÂêåÊ≠•ÂèØËÉΩÈúÄË¶ÅËºÉÈï∑ÊôÇÈñì)
    requestTimeout = setTimeout(() => {
        console.log('‚è∞ ÂêåÊ≠•Ë´ãÊ±ÇË∂ÖÊôÇÔºåËá™ÂãïÂèñÊ∂à');
        isClientConnected = false;
        if (!res.headersSent) {
            res.status(408).json({ error: "ÂêåÊ≠•Ë´ãÊ±ÇË∂ÖÊôÇ" });
        }
    }, 60000);

    req.on('close', () => {
        console.log('‚ö†Ô∏è ÂÆ¢Êà∂Á´ØÈÄ£Êé•Â∑≤‰∏≠Êñ∑ÔºåÂÅúÊ≠¢ÂêåÊ≠•ËôïÁêÜ');
        isClientConnected = false;
        clearTimeout(requestTimeout);
    });

    req.on('aborted', () => {
        console.log('‚ö†Ô∏è ÂÆ¢Êà∂Á´ØË´ãÊ±ÇÂ∑≤ÂèñÊ∂àÔºåÂÅúÊ≠¢ÂêåÊ≠•ËôïÁêÜ');
        isClientConnected = false;
        clearTimeout(requestTimeout);
    });

    const now = moment().locale("zh-tw").format("YYYY-MM-DD HH:mm:ss");

    try {
        // 1. Âæû NEON Ë≥áÊñôÂ∫´ÊäìÂèñË≥áÊñô
        const sqlNeon = `SELECT * FROM leave_applications ORDER BY id`;
        const neonResult = await leaveApply_Db.query(sqlNeon);
        const neonData = neonResult.rows;
        console.log("NEON Ë≥áÊñôÁ≠ÜÊï∏:", neonData.length);

        // 2. ÂæûÊú¨Âú∞ MySQL Ë≥áÊñôÂ∫´ÊäìÂèñË≥áÊñô
        const sqlLocal = `SELECT * FROM hr.absentsystem_leavesortoutall ORDER BY id`;
        const [localResult] = await db2.query(sqlLocal);
        const localData = localResult;
        console.log("Êú¨Âú∞Ë≥áÊñôÁ≠ÜÊï∏:", localData.length);

        // 3. Âª∫Á´ã Local ÁöÑ randomuniqueid Â∞çÊáâ Map
        const localMap = new Map();
        for (const row of localData) {
            if (row.randomuniqueid) {
                localMap.set(row.randomuniqueid, row);
            }
        }

        // 4. Ê¨Ñ‰ΩçËΩâÊèõË®≠ÂÆö
        const convertNeonToLocal = (neonRow) => ({
            id: neonRow.id,  // Êàñ‰Ω†ÊÉ≥Ëá™Ë®ÇÁöÑ ID
            employeeNumber: neonRow.employee_id,
            employeeName: neonRow.employee_name,
            leaveType: neonRow.leave_type,
            leaveStartTime: neonRow.start_date,
            leaveEndTime: neonRow.end_date,
            authPosition: neonRow.department,
            applyTime: neonRow.applied_at,
            managerSubmitTime: neonRow.approved_at,
            describtion: neonRow.reason,
            managerName: neonRow.approved_by,
            apply_folder_link: neonRow.apply_folder_link,
            errorStatusNotify: (() => {
                switch (neonRow.status) {
                    case "Â∑≤Ê†∏ÂáÜ": return "3";
                    case "ÂæÖÂØ©Ê†∏": return "4";
                    case "Â∑≤ÊãíÁµï": return "5";
                    default: return null;
                }
            })(),
            randomuniqueid: neonRow.randomuniqueid
        });

        // 5. ÈñãÂßãÂêåÊ≠•Ë≥áÊñô
        for (const neonRow of neonData) {
            const localMatch = localMap.get(neonRow.randomuniqueid);

            const localRowData = convertNeonToLocal(neonRow);

            console.log(`üîÑ ËôïÁêÜ NEON Ë≥áÊñô ID: ${neonRow.id}, randomuniqueid: ${neonRow.randomuniqueid}`);

            const insertSql = `
                INSERT INTO hr.absentsystem_leavesortoutall (
                    id,
                    employeeNumber,
                    employeeName,
                    leaveType,
                    leaveStartTime,
                    leaveEndTime,
                    authPosition,
                    applyTime,
                    managerSubmitTime,
                    describtion,
                    managerName,
                    apply_folder_link,
                    errorStatusNotify,
                    randomuniqueid,
                    is_synced ,
                    synced_at 
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,? ,?)
                ON DUPLICATE KEY UPDATE
                    employeeNumber = VALUES(employeeNumber),
                    employeeName = VALUES(employeeName),
                    leaveType = VALUES(leaveType),
                    leaveStartTime = VALUES(leaveStartTime),
                    leaveEndTime = VALUES(leaveEndTime),
                    authPosition = VALUES(authPosition),
                    applyTime = VALUES(applyTime),
                    managerSubmitTime = VALUES(managerSubmitTime),
                    describtion = VALUES(describtion),
                    managerName = VALUES(managerName),
                    apply_folder_link = VALUES(apply_folder_link),
                    errorStatusNotify = VALUES(errorStatusNotify),
                    randomuniqueid = VALUES(randomuniqueid)
            `;

            const insertParams = [
                localRowData.id,
                localRowData.employeeNumber,
                localRowData.employeeName,
                localRowData.leaveType,
                localRowData.leaveStartTime,
                localRowData.leaveEndTime,
                localRowData.authPosition,
                localRowData.applyTime,
                localRowData.managerSubmitTime,
                localRowData.describtion,
                localRowData.managerName,
                localRowData.apply_folder_link,
                localRowData.errorStatusNotify,
                localRowData.randomuniqueid,
                true,
                now
            ];

            await db2.query(insertSql, insertParams);

            if (localMatch) {
                console.log(`‚úÖ Â∑≤Â≠òÂú®ÔºåÂ∑≤Êõ¥Êñ∞ randomuniqueid: ${neonRow.randomuniqueid}`);
            } else {
                console.log(`üÜï ‰∏çÂ≠òÂú®ÔºåÂ∑≤Êñ∞Â¢û randomuniqueid: ${neonRow.randomuniqueid}`);
            }

            // Êõ¥Êñ∞ NEON is_synced ÁãÄÊÖã
            const updateNeonSql = `
                UPDATE leave_applications
                SET is_synced = true, synced_at = NOW()
                WHERE id = $1
            `;
            await leaveApply_Db.query(updateNeonSql, [neonRow.id]);
            console.log(`‚òëÔ∏è NEON ÂêåÊ≠•Ê®ôË®òÂÆåÊàê ID: ${neonRow.id}`);
        }

        // 6. ÂõûÂÇ≥
        res.status(200).json({
            message: "ÂêåÊ≠•ÂÆåÊàê",
            totalNeon: neonData.length,
            timestamp: new Date().toISOString()
        });

        // 7. Âü∑Ë°åÊ∏ÖÁêÜ - ‰∏çÂΩ±Èüø‰∏ªË¶ÅÂõûÊáâ
        try {
            await deleteData();
            console.log("‚úÖ Ë≥áÊñôÊ∏ÖÁêÜÂÆåÊàê");
        } catch (cleanupErr) {
            console.error("‚ö†Ô∏è Ë≥áÊñôÊ∏ÖÁêÜÂ§±ÊïóÔºå‰ΩÜ‰∏çÂΩ±Èüø‰∏ªË¶ÅÂäüËÉΩ:", cleanupErr.message);
        }

    } catch (err) {
        console.error("‚ùå ÂêåÊ≠•ÈÅéÁ®ãÁôºÁîüÈåØË™§:", err);
        res.status(500).json({
            error: "ÂêåÊ≠•Ë≥áÊñôÂ§±Êïó",
            message: err.message,
            detail: err.detail || err.stack
        });
    }
});





router.post("/postLeaveApply", upload.any(), async (req, res) => {
    console.log("Received body:", req.body);
    console.log("Received files:", req.files);

    const formData = req.body;
    
    // ËôïÁêÜ‰∏äÂÇ≥ÁöÑÊ™îÊ°à
    const uploadedFiles = req.files ? req.files.map(file => ({
        fieldName: file.fieldname,  // file0, file1, file2, file3
        originalName: file.originalname,
        fileName: file.filename,
        path: file.path,
        size: file.size
    })) : [];

    let sql = `INSERT INTO hr.absentsystem_leavesortoutall 
        (
            employeeNumber,
            employeeName,
            leaveType,
            leaveStartTime,
            leaveEndTime,
            leaveTotalHour,
            leaveFile,
            describtion,
            positionarea,
            errorStatusNotify,
            managerAuth,
            apply__folder_link
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)
    `;

    try {
        const [rows] = await db2.query(sql, [
            formData.memberID,
            formData.name,
            formData.leaveType,
            formData.startDate,
            formData.endDate,
            formData.leaveTotalHour,
            JSON.stringify(uploadedFiles),
            formData.describtion,
            formData.positionarea,
            formData.errorStatusNotify,
            formData.managerAuth,
            formData.apply__folder_link
        ]);
        
        console.log("Êñ∞Â¢ûË´ãÂÅáÁî≥Ë´ãÊàêÂäü", rows);
        console.log("‰∏äÂÇ≥ÁöÑÊ™îÊ°àË≥áË®ä:", uploadedFiles);

        res.status(200).json({
            message: "Êñ∞Â¢ûË´ãÂÅáÁî≥Ë´ãÊàêÂäü",
            data: rows,
            uploadedFiles: uploadedFiles
        });
        
    } catch(err) {
        console.error("Error <<postLeaveApply>>:", err);
        res.status(500).json({
            error: "Êñ∞Â¢ûË´ãÂÅáÁî≥Ë´ãÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶",
            message: err.message,
        });
    }
});

// ÂêåÊ≠• NEON Ë≥áÊñôÂ∫´‰∏≠Êú™ÂêåÊ≠•ÁöÑË´ãÂÅáÁî≥Ë´ãÂà∞Êú¨Âú∞Ë≥áÊñôÂ∫´
const syncUnsyncedLeaveData = async () => {
    const now = moment().locale("zh-tw").format("YYYY-MM-DD HH:mm:ss");
    
    try {
        // 1. Âæû NEON Ë≥áÊñôÂ∫´ÊäìÂèñÊú™ÂêåÊ≠•ÁöÑË≥áÊñô (is_synced = false Êàñ NULL)
        const sqlNeon = `
            SELECT * FROM leave_applications 
            WHERE (is_synced = false OR is_synced IS NULL)
            ORDER BY id DESC
        `;
        const neonResult = await leaveApply_Db.query(sqlNeon);
        const unsyncedData = neonResult.rows;
        
        console.log(`üîÑ ÁôºÁèæ ${unsyncedData.length} Á≠ÜÊú™ÂêåÊ≠•ÁöÑ NEON Ë≥áÊñô`);
        
        if (unsyncedData.length === 0) {
            return {
                success: true,
                message: "Ê≤íÊúâÈúÄË¶ÅÂêåÊ≠•ÁöÑË≥áÊñô",
                syncedCount: 0
            };
        }

        // 2. ÂæûÊú¨Âú∞Ë≥áÊñôÂ∫´Áç≤ÂèñÁèæÊúâÁöÑ randomuniqueid Âª∫Á´ãÂ∞çÊáâ Map
        const sqlLocal = `SELECT randomuniqueid FROM hr.absentsystem_leavesortoutall WHERE randomuniqueid IS NOT NULL`;
        const [localResult] = await db2.query(sqlLocal);
        const existingIds = new Set(localResult.map(row => row.randomuniqueid));

        // 3. Ê¨Ñ‰ΩçËΩâÊèõË®≠ÂÆö
        const convertNeonToLocal = (neonRow) => ({
            id: neonRow.id,
            employeeNumber: neonRow.employee_id,
            employeeName: neonRow.employee_name,
            leaveType: neonRow.leave_type,
            leaveStartTime: neonRow.start_date,
            leaveEndTime: neonRow.end_date,
            authPosition: neonRow.department,
            applyTime: neonRow.applied_at,
            managerSubmitTime: neonRow.approved_at,
            describtion: neonRow.reason,
            managerName: neonRow.approved_by,
            apply_folder_link: neonRow.apply_folder_link,
            errorStatusNotify: (() => {
                switch (neonRow.status) {
                    case "Â∑≤Ê†∏ÂáÜ": return "3";
                    case "ÂæÖÂØ©Ê†∏": return "4";
                    case "Â∑≤ÊãíÁµï": return "5";
                    default: return "4";
                }
            })(),
            randomuniqueid: neonRow.randomuniqueid
        });

        let syncedCount = 0;
        let skippedCount = 0;

        // 4. ÂêåÊ≠•Êú™ÂêåÊ≠•ÁöÑË≥áÊñô
        for (const neonRow of unsyncedData) {
            try {
                // Ê™¢Êü•ÊòØÂê¶Â∑≤Â≠òÂú®ÊñºÊú¨Âú∞Ë≥áÊñôÂ∫´
                if (existingIds.has(neonRow.randomuniqueid)) {
                    console.log(`‚è≠Ô∏è Ë∑≥ÈÅéÂ∑≤Â≠òÂú®ÁöÑË≥áÊñô randomuniqueid: ${neonRow.randomuniqueid}`);
                    skippedCount++;
                    continue;
                }

                const localRowData = convertNeonToLocal(neonRow);

                // ÊèíÂÖ•Âà∞Êú¨Âú∞Ë≥áÊñôÂ∫´
                const insertSql = `
                    INSERT INTO hr.absentsystem_leavesortoutall (
                        employeeNumber,
                        employeeName,
                        leaveType,
                        leaveStartTime,
                        leaveEndTime,
                        authPosition,
                        applyTime,
                        managerSubmitTime,
                        describtion,
                        managerName,
                        apply_folder_link,
                        errorStatusNotify,
                        randomuniqueid,
                        is_synced,
                        synced_at
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                `;

                const insertParams = [
                    localRowData.employeeNumber,
                    localRowData.employeeName,
                    localRowData.leaveType,
                    localRowData.leaveStartTime,
                    localRowData.leaveEndTime,
                    localRowData.authPosition,
                    localRowData.applyTime,
                    localRowData.managerSubmitTime,
                    localRowData.describtion,
                    localRowData.managerName,
                    localRowData.apply_folder_link,
                    localRowData.errorStatusNotify,
                    localRowData.randomuniqueid,
                    true,
                    now
                ];

                await db2.query(insertSql, insertParams);

                // Êõ¥Êñ∞ NEON Ë≥áÊñôÂ∫´ÁöÑÂêåÊ≠•ÁãÄÊÖã
                const updateNeonSql = `
                    UPDATE leave_applications
                    SET is_synced = true, synced_at = NOW()
                    WHERE id = $1
                `;
                await leaveApply_Db.query(updateNeonSql, [neonRow.id]);

                syncedCount++;
                console.log(`‚úÖ ÂêåÊ≠•ÂÆåÊàê ID: ${neonRow.id}, randomuniqueid: ${neonRow.randomuniqueid}`);

            } catch (rowError) {
                console.error(`‚ùå ÂêåÊ≠•ÂñÆÁ≠ÜË≥áÊñôÂ§±Êïó ID: ${neonRow.id}:`, rowError.message);
            }
        }

        console.log(`üéâ ÂêåÊ≠•ÂÆåÊàêÔºÅÂêåÊ≠•: ${syncedCount} Á≠ÜÔºåË∑≥ÈÅé: ${skippedCount} Á≠Ü`);
        
        return {
            success: true,
            message: "ÂêåÊ≠•ÂÆåÊàê",
            syncedCount,
            skippedCount,
            totalProcessed: unsyncedData.length
        };

    } catch (err) {
        console.error("‚ùå ÂêåÊ≠•ÈÅéÁ®ãÁôºÁîüÈåØË™§:", err);
        throw err;
    }
};

router.get("/getLeaveApply", async (req, res) => {
    const managerAuth = req.query;
    console.log("Received query:", managerAuth);

    // ÂÖàÂü∑Ë°åÂêåÊ≠• NEON Ë≥áÊñôÂ∫´ÁöÑÊú™ÂêåÊ≠•Ë≥áÊñô
    try {
        console.log("üîÑ ÈñãÂßãÂêåÊ≠• NEON Ë≥áÊñôÂ∫´Êú™ÂêåÊ≠•ÁöÑË´ãÂÅáÁî≥Ë´ã...");
        const syncResult = await syncUnsyncedLeaveData();
        console.log("‚úÖ ÂêåÊ≠•ÁµêÊûú:", syncResult);
    } catch (syncError) {
        console.error("‚ö†Ô∏è ÂêåÊ≠•Â§±ÊïóÔºå‰ΩÜÁπºÁ∫åÂü∑Ë°åÊü•Ë©¢:", syncError.message);
        // Âç≥‰ΩøÂêåÊ≠•Â§±ÊïóÔºå‰πüÁπºÁ∫åÂü∑Ë°åÊü•Ë©¢
    }

    // Ê†πÊìö‰∏ªÁÆ°Ê¨äÈôêË®≠ÂÆöÈÉ®ÈñÄÁØ©ÈÅ∏
    let departmentFilter = "";
    switch (String(managerAuth.managerAuth).trim()) {
        case "0":
            departmentFilter = ""; // Êü•ÁúãÊâÄÊúâÈÉ®ÈñÄ
            break;
        case "1":
            departmentFilter = "Ë°åÊîø";
            break;
        case "2":
            departmentFilter = "Ë®≠ÂÇôËàáÂª†Âãô";
            break;
        case "3":
            departmentFilter = "ÁµÑË£ù";
            break;
        case "4":
            departmentFilter = "Á†îÁôº‰∏Ä";
            break;
        case "5":
            departmentFilter = "Â°ó‰ΩàÂçÄ";
            break;
        case "6":
            departmentFilter = "ÂÑ≤ËÉΩ‰∏≠ÂøÉ";
            break;
        case "7":
            departmentFilter = "È¶¨ÈÅîÁµÑ";
            break;
    }

    try {
        // ÂæûÊú¨Âú∞Ë≥áÊñôÂ∫´Áç≤ÂèñË≥áÊñôÔºàÂåÖÂê´Â∑≤ÂêåÊ≠•ÁöÑ NEON Ë≥áÊñôÔºâ
        let sql = "";
        let params = [];

        if (departmentFilter === "") {
            // Êü•ÁúãÊâÄÊúâÈÉ®ÈñÄÁöÑÂæÖÂØ©Ê†∏Áî≥Ë´ã
            sql = `SELECT * FROM hr.absentSystem_leaveSortOutAll WHERE errorStatusNotify NOT IN ("3", "5") ORDER BY id DESC`;
        } else {
            // Êü•ÁúãÁâπÂÆöÈÉ®ÈñÄÁöÑÂæÖÂØ©Ê†∏Áî≥Ë´ã
            sql = `SELECT * FROM hr.absentSystem_leaveSortOutAll WHERE errorStatusNotify NOT IN ("3", "5") AND authPosition = ? ORDER BY id DESC`;
            params = [departmentFilter];
        }

        const [rows] = await db2.query(sql, params);
        console.log("Êü•Ë©¢Âà∞ÁöÑË´ãÂÅáÁî≥Ë´ãË≥áÊñôÁ≠ÜÊï∏:", rows.length);

        // Ê†ºÂºèÂåñË≥áÊñô
        const formattedRows = rows.map(row => {
            return {
                ...row,
                leaveFile: row.leaveFile ? JSON.parse(row.leaveFile) : [],
                dataSource: row.randomuniqueid ? "Â∑≤ÂêåÊ≠•NEONË≥áÊñô" : "Êú¨Âú∞Ë≥áÊñô"
            };
        });

        res.status(200).json({
            message: "ÂèñÂæóË´ãÂÅáÁî≥Ë´ãÊàêÂäü",
            data: formattedRows,
            summary: {
                totalCount: formattedRows.length,
                syncedFromNeon: formattedRows.filter(row => row.randomuniqueid).length,
                localOnly: formattedRows.filter(row => !row.randomuniqueid).length
            }
        });
        
    } catch(err) {
        console.error("Error <<getLeaveApply>>:", err);
        res.status(500).json({
            error: "ÂèñÂæóË´ãÂÅáÁî≥Ë´ãÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶",
            message: err.message,
        });
    }
})


// Êñá‰ª∂‰∏ãËºâ API
router.get("/download", (req, res) => {
    const { filename } = req.query;
    
    if (!filename) {
        return res.status(400).json({ error: "Êñá‰ª∂ÂêçÁ®±ÊòØÂøÖÈúÄÁöÑ" });
    }

    const filePath = path.join("Z:/Ë≥áË®äËôï- Â≠òË´ãÂÅáË≥áË®ä/leaveFileWay", filename);
    
    // Ê™¢Êü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
    if (!fs.existsSync(filePath)) {
        return res.status(404).json({ error: "Êñá‰ª∂‰∏çÂ≠òÂú®" });
    }

    try {
        // Ë®≠ÁΩÆ‰∏ãËºâÊ®ôÈ†≠
        const originalName = filename.split('_').slice(3).join('_') || filename;
        res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(originalName)}"`);
        res.setHeader('Content-Type', 'application/octet-stream');
        
        // ÂâµÂª∫Êñá‰ª∂ÊµÅ‰∏¶ÂÇ≥ÈÄÅ
        const fileStream = fs.createReadStream(filePath);
        fileStream.pipe(res);
        
        fileStream.on('error', (error) => {
            console.error("Êñá‰ª∂ËÆÄÂèñÈåØË™§:", error);
            res.status(500).json({ error: "Êñá‰ª∂‰∏ãËºâÂ§±Êïó" });
        });
        
    } catch (error) {
        console.error("‰∏ãËºâÊñá‰ª∂ÈåØË™§:", error);
        res.status(500).json({ error: "‰∏ãËºâÊñá‰ª∂ÊôÇÁôºÁîüÈåØË™§" });
    }
});

// Êñá‰ª∂Êü•Áúã API
router.get("/view", (req, res) => {
    const { filename } = req.query;
    
    if (!filename) {
        return res.status(400).json({ error: "Êñá‰ª∂ÂêçÁ®±ÊòØÂøÖÈúÄÁöÑ" });
    }

    const filePath = path.join("Z:/Ë≥áË®äËôï- Â≠òË´ãÂÅáË≥áË®ä/leaveFileWay", filename);
    
    // Ê™¢Êü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
    if (!fs.existsSync(filePath)) {
        return res.status(404).json({ error: "Êñá‰ª∂‰∏çÂ≠òÂú®" });
    }

    try {
        // Ê†πÊìöÊñá‰ª∂ÂâØÊ™îÂêçË®≠ÁΩÆÈÅ©Áï∂ÁöÑ Content-Type
        const fileExtension = path.extname(filename).toLowerCase();
        let contentType = 'application/octet-stream';
        
        switch (fileExtension) {
            case '.pdf':
                contentType = 'application/pdf';
                break;
            case '.jpg':
            case '.jpeg':
                contentType = 'image/jpeg';
                break;
            case '.png':
                contentType = 'image/png';
                break;
            case '.gif':
                contentType = 'image/gif';
                break;
            case '.txt':
                contentType = 'text/plain; charset=utf-8';
                break;
            case '.doc':
                contentType = 'application/msword';
                break;
            case '.docx':
                contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
                break;
            case '.xls':
                contentType = 'application/vnd.ms-excel';
                break;
            case '.xlsx':
                contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
                break;
        }
        
        // Ë®≠ÁΩÆÊü•ÁúãÊ®ôÈ†≠
        res.setHeader('Content-Type', contentType);
        res.setHeader('Content-Disposition', `inline; filename="${encodeURIComponent(filename)}"`);
        
        // ÂâµÂª∫Êñá‰ª∂ÊµÅ‰∏¶ÂÇ≥ÈÄÅ
        const fileStream = fs.createReadStream(filePath);
        fileStream.pipe(res);
        
        fileStream.on('error', (error) => {
            console.error("Êñá‰ª∂ËÆÄÂèñÈåØË™§:", error);
            res.status(500).json({ error: "Êñá‰ª∂Êü•ÁúãÂ§±Êïó" });
        });
        
    } catch (error) {
        console.error("Êü•ÁúãÊñá‰ª∂ÈåØË™§:", error);
        res.status(500).json({ error: "Êü•ÁúãÊñá‰ª∂ÊôÇÁôºÁîüÈåØË™§" });
    }
});

router.put("/updateLeaveStatus" , async (req, res) => {
    const { id, errorStatusNotify ,  managerName , managerNumber} = req.body;
    console.log("Received body:", req.body);

    if (!id || !errorStatusNotify) {
        return res.status(400).json({ error: "Ë´ãÊèê‰æõ id Âíå errorStatusNotify" });
    }

  let sql = `UPDATE hr.absentSystem_leaveSortOutAll SET errorStatusNotify = ?, managerName = ?, managerNumber = ? WHERE id = ?`;

    try {
        const [result] = await db2.query(sql, [errorStatusNotify, managerName, managerNumber, id]);
        console.log("Êõ¥Êñ∞Ë´ãÂÅáÁî≥Ë´ãÁãÄÊÖãÊàêÂäü", result);
        
        res.status(200).json({
            message: "Êõ¥Êñ∞Ë´ãÂÅáÁî≥Ë´ãÁãÄÊÖãÊàêÂäü",
            data: result
        });
        
    } catch(err) {
        console.error("Error <<updateLeaveApply>>:", err);
        res.status(500).json({
            error: "Êõ¥Êñ∞Ë´ãÂÅáÁî≥Ë´ãÁãÄÊÖãÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶",
            message: err.message,
        });
    }
})

router.get("/LeaveOverallRecord", async (req , res) => {
    const {
        managerAuth , 
        employeeNumber , 
        searchInput ,
        sortStartDate ,
        sortEndDate,
        page = 1,
        pageSize = 25
    
    } = req.query

    const limit = parseInt(pageSize, 10);
    const offset = (parseInt(page, 10) - 1) * limit;

    console.log("Received query:", req.query);

    let sql = "";
    let params = [];
    let positionarea = "";

    // ‰æùÊìö‰∏ªÁÆ°Ê¨äÈôêË®≠ÂÆöÂèØÁúãÂà∞ÁöÑÈÉ®ÈñÄ
    switch (String(managerAuth).trim()) {
        case "1":
            positionarea = "Ë°åÊîø";
            break;
        case "2":
            positionarea = "Ë®≠ÂÇôËàáÂª†Âãô";
            break;
        case "2-1":
            positionarea = "Ê∑∑ÊºøÂçÄ";
            break;
        case "2-2":
            positionarea = "Â°ó‰ΩàÂçÄ";
            break;
        case "2-3":
            positionarea = "ËºæÂ£ìÂçÄ";
            break;
        case "2-4":
            positionarea = "ÈõªËäØÁµÑË£ùÂçÄ";
            break;
        case "2-5":
            positionarea = "ÈõªÂåñÂ≠∏ÂçÄ";
            break;
        case "2-6":
            positionarea = "Ê®°ÁµÑËàáÁî¢ÂìÅÊ∏¨Ë©¶ÂçÄ";
            break;
        case "3":
            positionarea = "ÁµÑË£ù";
            break;
        case "4":
            positionarea = "Á†îÁôº‰∏Ä";
            break;
        case "5":
            positionarea = "Â°ó‰ΩàÂçÄ";
            break;
        case "6":
            positionarea = "ÂÑ≤ËÉΩ‰∏≠ÂøÉ";
            break;
        case "7":
            positionarea = "È¶¨ÈÅîÁµÑ";
            break;
        default:
            positionarea = "";
    }

    // Á¢∫Ë™ç‰∏ªÁÆ°Ê¨äÈôê
    if (!managerAuth) {
        // ÂÉÖËÉΩÁúãÂÄã‰∫∫Ë´ãÂÅáË≥áÊñô
        sql = `SELECT * FROM hr.absentSystem_leaveSortOutAll WHERE employeeNumber = ? AND leaveStartTime BETWEEN ? AND ? AND leaveEndTime BETWEEN ? AND ?`;
        params = [employeeNumber , sortStartDate , sortEndDate , sortStartDate , sortEndDate];
    } else if (managerAuth === "0") {
        // ‰∏ªÁÆ°Ê¨äÈôêÁÇ∫0ÔºåÊü•ÁúãÊâÄÊúâË´ãÂÅáË≥áÊñô
        sql = `SELECT * FROM hr.absentSystem_leaveSortOutAll WHERE 1=1 AND leaveStartTime BETWEEN ? AND ? AND leaveEndTime BETWEEN ? AND ?`;  // ‰øÆÊ≠£ÔºöÂä†‰∏ä WHERE 1=1
        params = [sortStartDate , sortEndDate , sortStartDate , sortEndDate];
    } else {
        // ‰∏ªÁÆ°Ê¨äÈôêÁÇ∫1-7ÔºåÊü•ÁúãÁâπÂÆöÈÉ®ÈñÄÁöÑË´ãÂÅáË≥áÊñô
        sql = `SELECT * FROM hr.absentSystem_leaveSortOutAll WHERE positionarea = ? AND leaveStartTime BETWEEN ? AND ? AND leaveEndTime BETWEEN ? AND ?`;
        params = [positionarea , sortStartDate , sortEndDate , sortStartDate , sortEndDate];
    }

    // Â¶ÇÊûúÊúâÊêúÂ∞ãÊ¢ù‰ª∂ÔºåÂâáÊ∑ªÂä†Âà∞ SQL Êü•Ë©¢‰∏≠
    if (typeof searchInput === 'string' && searchInput.trim() !== '') {
        // Âà§Êñ∑ searchInput ÊòØÂê¶ÁÇ∫Á¥îÊï∏Â≠ó
        if (/^\d+$/.test(searchInput.trim())) {
            // Á¥îÊï∏Â≠óÔºåÊêúÂ∞ãÂì°Â∑•Á∑®ËôüÔºà‰øÆÊ≠£Ôºö‰ΩøÁî® LIKE Êàñ = Ôºå‰∏çË¶ÅÂêåÊôÇ‰ΩøÁî®Ôºâ
            let paddedNumber = searchInput.trim().padStart(3, '0');
            sql += ` AND employeeNumber LIKE ?`;
            params.push(`%${paddedNumber}%`);
        } else {
            // ‰∏çÊòØÁ¥îÊï∏Â≠óÔºåÊêúÂ∞ãÂßìÂêçÔºà‰øÆÊ≠£Ôºö‰ΩøÁî® LIKEÔºâ
            sql += ` AND employeeName LIKE ?`;
            params.push(`%${searchInput.trim()}%`);
        }
    }
    sql += ` ORDER BY id DESC LIMIT ? OFFSET ?`;

    console.log("SQL Query:", sql);
    console.log("Params:", params);
    console.log("positionarea:", positionarea);
    params.push(limit, offset);

    try {
        const [rows] = await dbcon.promise().query(sql, params);
        console.log("ÂèñÂæóË´ãÂÅáÁ¥ÄÈåÑÊàêÂäü", rows);

        // Ê†ºÂºèÂåñËøîÂõûË≥áÊñôÔºåËß£Êûê leaveFile JSON
        const formattedRows = rows.map(row => {
            return {
                ...row,
                leaveFile: row.leaveFile ? JSON.parse(row.leaveFile) : []
            };
        });

        // Á∏ΩÊï∏ÈáèÊü•Ë©¢
        let countSql = "";
        let countParams = [];

        if (!managerAuth) {
            // ÂÉÖËÉΩÁúãÂÄã‰∫∫Ë´ãÂÅáË≥áÊñô
            countSql = `SELECT COUNT(*) AS total FROM hr.absentSystem_leaveSortOutAll WHERE employeeNumber = ? AND leaveStartTime BETWEEN ? AND ? AND leaveEndTime BETWEEN ? AND ?`;
            countParams = [employeeNumber, sortStartDate, sortEndDate, sortStartDate, sortEndDate];
        } else if (managerAuth === "0") {
            // ‰∏ªÁÆ°Ê¨äÈôêÁÇ∫0ÔºåÊü•ÁúãÊâÄÊúâË´ãÂÅáË≥áÊñô
            countSql = `SELECT COUNT(*) AS total FROM hr.absentSystem_leaveSortOutAll WHERE 1=1 AND leaveStartTime BETWEEN ? AND ? AND leaveEndTime BETWEEN ? AND ?`;
            countParams = [sortStartDate, sortEndDate, sortStartDate, sortEndDate];
        } else {
            // ‰∏ªÁÆ°Ê¨äÈôêÁÇ∫1-7ÔºåÊü•ÁúãÁâπÂÆöÈÉ®ÈñÄÁöÑË´ãÂÅáË≥áÊñô
            countSql = `SELECT COUNT(*) AS total FROM hr.absentSystem_leaveSortOutAll WHERE positionarea = ? AND leaveStartTime BETWEEN ? AND ? AND leaveEndTime BETWEEN ? AND ?`;
            countParams = [positionarea, sortStartDate, sortEndDate, sortStartDate, sortEndDate];
        }

        // Â¶ÇÊûúÊúâÊêúÂ∞ãÊ¢ù‰ª∂ÔºåÂâáÊ∑ªÂä†Âà∞ SQL Êü•Ë©¢‰∏≠
        if (typeof searchInput === 'string' && searchInput.trim() !== '') {
            if (/^\d+$/.test(searchInput.trim())) {
            let paddedNumber = searchInput.trim().padStart(3, '0');
            countSql += ` AND employeeNumber LIKE ?`;
            countParams.push(`%${paddedNumber}%`);
            } else {
            countSql += ` AND employeeName LIKE ?`;
            countParams.push(`%${searchInput.trim()}%`);
            }
        }

        const [countRows] = await dbcon.promise().query(countSql, countParams);
        const totalCount = countRows[0].total;

        console.log("Total count:", totalCount);
        res.status(200).json({
            message: "ÂèñÂæóË´ãÂÅáÁ¥ÄÈåÑÊàêÂäü",
            data: formattedRows,
            totalCount: totalCount,
            totalPages: Math.ceil(totalCount / limit),
            page: parseInt(page, 10),
            pageSize: limit
        });


    } catch (err) {
        console.error("Error <<LeaveOverallRecord>>:", err);
        res.status(500).json({
            error: "ÂèñÂæóË´ãÂÅáÁ¥ÄÈåÑÂ§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶",
            message: err.message,
        });
    }
})


module.exports = router;